#include <iostream>
using namespace std;

// Merge two sorted halves and count inversions
long long mergeAndCount(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1; // Size of left half
    int n2 = right - mid;    // Size of right half

    int L[n1], R[n2]; // Temporary arrays

    // Copy data into temp arrays
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    long long count = 0;
    int i = 0, j = 0, k = left;

    // Merge the two halves
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
            count += (n1 - i); // Count inversions
        }
    }

    // Copy remaining elements
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];

    return count;
}

// Recursive merge sort function
long long mergeSortAndCount(int arr[], int left, int right) {
    long long count = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;

        count += mergeSortAndCount(arr, left, mid);
        count += mergeSortAndCount(arr, mid + 1, right);
        count += mergeAndCount(arr, left, mid, right);
    }
    return count;
}

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    int arr[n];
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    long long inversionCount = mergeSortAndCount(arr, 0, n - 1);
    cout << "Number of inversions: " << inversionCount << endl;

    return 0;
}

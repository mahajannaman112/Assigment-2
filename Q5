#include <iostream>
using namespace std;

// ---------------- Diagonal Matrix ----------------
class Diagonal {
    int *A;
    int n;
public:
    Diagonal(int n) {
        this->n = n;
        A = new int[n];
    }
    void set(int i, int j, int x) {
        if (i == j) A[i-1] = x;
    }
    int get(int i, int j) {
        if (i == j) return A[i-1];
        else return 0;
    }
    void display() {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) cout << A[i] << " ";
                else cout << "0 ";
            }
            cout << endl;
        }
    }
};

// ---------------- Lower Triangular Matrix ----------------
class LowerTriangular {
    int *A;
    int n;
public:
    LowerTriangular(int n) {
        this->n = n;
        A = new int[n*(n+1)/2];
    }
    void set(int i, int j, int x) {
        if (i >= j) A[i*(i-1)/2 + (j-1)] = x;
    }
    int get(int i, int j) {
        if (i >= j) return A[i*(i-1)/2 + (j-1)];
        else return 0;
    }
    void display() {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (i >= j) cout << get(i, j) << " ";
                else cout << "0 ";
            }
            cout << endl;
        }
    }
};

// ---------------- Upper Triangular Matrix ----------------
class UpperTriangular {
    int *A;
    int n;
public:
    UpperTriangular(int n) {
        this->n = n;
        A = new int[n*(n+1)/2];
    }
    void set(int i, int j, int x) {
        if (i <= j) A[(i-1)*n - (i-2)*(i-1)/2 + (j-i)] = x;
    }
    int get(int i, int j) {
        if (i <= j) return A[(i-1)*n - (i-2)*(i-1)/2 + (j-i)];
        else return 0;
    }
    void display() {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (i <= j) cout << get(i, j) << " ";
                else cout << "0 ";
            }
            cout << endl;
        }
    }
};

// ---------------- Symmetric Matrix ----------------
class Symmetric {
    int *A;
    int n;
public:
    Symmetric(int n) {
        this->n = n;
        A = new int[n*(n+1)/2];
    }
    void set(int i, int j, int x) {
        if (i >= j) A[i*(i-1)/2 + (j-1)] = x;
        else A[j*(j-1)/2 + (i-1)] = x; // symmetry
    }
    int get(int i, int j) {
        if (i >= j) return A[i*(i-1)/2 + (j-1)];
        else return A[j*(j-1)/2 + (i-1)];
    }
    void display() {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                cout << get(i, j) << " ";
            }
            cout << endl;
        }
    }
};

// ---------------- Main ----------------
int main() {
    int n = 4;

    cout << "Diagonal Matrix:" << endl;
    Diagonal d(n);
    d.set(1,1,5); d.set(2,2,8); d.set(3,3,9); d.set(4,4,12);
    d.display();
    cout << endl;

    cout << "Lower Triangular Matrix:" << endl;
    LowerTriangular lt(n);
    lt.set(1,1,5); lt.set(2,1,8); lt.set(2,2,9);
    lt.set(3,1,6); lt.set(3,2,7); lt.set(3,3,12);
    lt.set(4,1,3); lt.set(4,2,2); lt.set(4,3,4); lt.set(4,4,10);
    lt.display();
    cout << endl;

    cout << "Upper Triangular Matrix:" << endl;
    UpperTriangular ut(n);
    ut.set(1,1,5); ut.set(1,2,8); ut.set(1,3,9); ut.set(1,4,10);
    ut.set(2,2,7); ut.set(2,3,11); ut.set(2,4,6);
    ut.set(3,3,12); ut.set(3,4,4);
    ut.set(4,4,15);
    ut.display();
    cout << endl;

    cout << "Symmetric Matrix:" << endl;
    Symmetric s(n);
    s.set(1,1,5); s.set(2,1,8); s.set(2,2,7); s.set(3,1,6);
    s.set(3,2,9); s.set(3,3,12); s.set(4,1,4); s.set(4,2,10); s.set(4,3,15); s.set(4,4,3);
    s.display();
    cout << endl;

    return 0;
}
